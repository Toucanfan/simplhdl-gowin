from simplhdl.flow import FlowBase, FlowFactory
from simplhdl.flows.implementationflow import ImplementationFlow
from simplhdl.utils import sh

from simplhdl.pyedaa.fileset import FileSet
from simplhdl.pyedaa import VHDLSourceFile, VerilogSourceFile, VerilogIncludeFile, SystemVerilogSourceFile
from simplhdl.pyedaa.project import Project
from simplhdl.pyedaa.attributes import UsedIn

from argparse import Namespace
from pathlib import Path
from jinja2 import Template
import shutil
import os
import logging

logger = logging.getLogger(__name__)

FLOWNAME = "gowin"

PROJECT_TEMPLATE = """
# project.tcl
# This file is autogenerated by the SimplHDL-gowin flow.

{% if dev_ver %}
create_project -name {{project.Name}} -pn {{part_no}} -device_version {{dev_ver}}
{% else %}
create_project -name {{project.Name}} -pn {{part_no}}
{% endif %}


set_option -synthesis_tool gowinsynthesis
set_option -verilog_std sysv2017
set_option -vhdl_std vhd2008

{% for file in project.DefaultDesign.Files() if 'implementation' in file[UsedIn] %}
{% if file.FileType == VerilogIncludeFile %}
add_file -type verilog "{{file.Path}}"
{% elif file.FileType == SystemVerilogSourceFile %}
add_file -type verilog "{{file.Path}}"
{% elif file.FileType == VerilogSourceFile %}
add_file -type verilog "{{file.Path}}"
{% elif file.FileType == VHDLSourceFile %}
add_file -type vhdl "{{file.Path}}"
set_file_prop -lib {{file.Library}} "{{file.Path}}"
{% else %}
add_file "{{file.Path}}"
{% endif %}
{% endfor %}

set_option -top_module {{project.DefaultDesign.DefaultFileSet.TopLevel}}

"""

RUN_TEMPLATE = """
# run.tcl
# This file is autogenerated by the SimplHDL-gowin flow.

open_project {{project.Name}}/{{project.Name}}.gprj
run {{step}}
run close

"""

def generate_file_from_template(template: Template, output_dir: Path, filename: str, *args, **kwargs) -> bool:
    templatefile = Path(template.filename)
    output = output_dir.joinpath(filename)
    text = template.render(*args, **kwargs)
    if output.exists():
        with output.open() as f:
            old_text = f.read()
        if old_text == text:
            logger.debug(f"{output.absolute()}: is already up to date")
            return False
    logger.debug(f"{output.absolute()}: create new")
    with output.open('w') as f:
        f.write(text)
    return True

@FlowFactory.register(FLOWNAME)
class GowinFlow(ImplementationFlow):
    def __init__(self, name: str, args: Namespace, project: Project, builddir: Path):
        super().__init__(name, args, project, builddir)

    @classmethod
    def parse_args(cls, subparsers):
        parser = subparsers.add_parser(FLOWNAME, help="Gowin FPGA flow")
        parser.add_argument(
            '--step',
            action='store',
            choices = ['syn',
                       'pnr',
                       'all'],
            default='all',
            help="flow step to run"
        )
        parser.add_argument(
            '--gui',
            action='store_true',
            help="Open project in Gowin GUI"
        )

    def is_tool_setup(self) -> None:
        exit: bool = False
        if shutil.which('gw_sh') is None:
            logger.error("'gw_sh' is not found in system PATH'")
            exit = True
        if shutil.which('gw_ide') is None:
            logger.error("'gw_ide' is not found in system PATH'")
            exit = True
        if exit:
            raise FileNotFoundError("The GOWIN tools are not setup correctly")

    def setup(self):
        self.is_tool_setup()
        os.makedirs(self.builddir, exist_ok=True)

    def generate(self):
        # Generate the project-creating project.tcl file
        part_spec = self.project.Part.split("__")
        part_no = part_spec[0]
        dev_ver = (len(part_spec) > 1) and part_spec[1] or None
        generate_file_from_template(Template(PROJECT_TEMPLATE), self.builddir, 'project.tcl',
                               VerilogIncludeFile=VerilogIncludeFile,
                               VerilogSourceFile=VerilogSourceFile,
                               SystemVerilogSourceFile=SystemVerilogSourceFile,
                               VHDLSourceFile=VHDLSourceFile,
                               project=self.project,
                               UsedIn=UsedIn,
                               part_no=part_no,
                               dev_ver=dev_ver)

        # Generate run.tcl
        generate_file_from_template(Template(RUN_TEMPLATE), self.builddir, 'run.tcl',
                               project=self.project,
                               step=self.args.step)

        projectDir = f"{self.project.Name}"
        command = f"rm -rf {projectDir}".split()
        sh(command, cwd=self.builddir, output=True)

        command = "gw_sh project.tcl".split()
        sh(command, cwd=self.builddir, output=True)

    def execute(self):
        command = "gw_sh run.tcl".split()
        sh(command, cwd=self.builddir, output=True)

    def run(self):
        print("Running the SimplHDL-GOWIN flow...")
        self.setup()
        self.generate()
        if self.args.gui:
            print("GOWIN IDE has been started, but you have to open the project manually.")
            cmd = f"open_project {self.project.Name}/{self.project.Name}.gprj"
            print("Copy/paste the following command into the GOWIN IDE console:")
            print("")
            print(f"\t\t{cmd}")
            print("")
            sh(['gw_ide'], cwd=self.builddir, output=True)
        else:
            self.execute()
